/* Removes min element from min heap and returns it */
int MinHeap :: extractMin()
{
if(heap_size <=0)
    return -1;
    
if(heap_size == 1)
{
   heap_size--;
   return harr[0];
}

int root = harr[0];
harr[0] = harr[heap_size-1];
heap_size--;
MinHeapify(0);
return root;
}

/* Removes element from position x in the min heap */
void MinHeap :: deleteKey(int i)
{
  if(i >= heap_size)
      return;
decreaseKey(i, INT_MIN);
extractMin();
}
/* Inserts an element at position x into the min heap*/

void MinHeap ::insertKey(int k)
{
if(heap_size == capacity)
     return;
heap_size++;
harr[heap_size-1] = k;
int i = heap_size-1;
while(i!= 0 && harr[parent(i)] > harr[i])
{
    swap(harr[parent(i)], harr[i]);
    i = parent(i);
}
}

void MinHeap::decreaseKey(int i, int new_val) {
    harr[i] = new_val;
    while (i != 0 && harr[parent(i)] > harr[i]) {
        swap(harr[i], harr[parent(i)]);
        i = parent(i);
    }
}

void MinHeap::MinHeapify(int i) {
    int l = left(i);
    int r = right(i);
    int smallest = i;
    if (l < heap_size && harr[l] < harr[i]) smallest = l;
    if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
    if (smallest != i) {
        swap(harr[i], harr[smallest]);
        MinHeapify(smallest);
    }
}


-------------------------------------------------------------------------------------------------------
Input:
2
7
1 4 1 2 3 1 6 2 0 3 3
5
1 8 1 9 2 1 3 3

Output:
2 6 - 1
8 -1
 

Explanation:
Testcase 1:
In the first test case for query 
1 4      the heap will have  {4}  
1 2      the heap will be {2 4}
3         removes min element from heap ie 2 and prints it now heap is {4} 
1 6      inserts 6 to heap now heap is {4 6}
2 0      delete element at position 0 of the heap, now heap is {6}
3         remove min element from heap ie 6 and prints it  now the heap is empty {}
3         since the heap is empty thus no min element exist so -1 is printed.
