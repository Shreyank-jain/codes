void heapify(int a[], int n, int index) {

     int largest = index;
     int left = 2*index+1;
     int right = 2*index+2;
     
     if(left<n && a[left]>a[largest])
           largest = left;
     
     if(right<n && a[right]>a[largest])
           largest = right;

     if(largest!=index){
         
         swap(a[largest],a[index]);
         heapify(a,n,largest);
      }
}

void buildHeap(int a[], int n) {
    
    for(int i=(n-1)/2;i>=0;i--){
        heapify(a,n,i);
}
}


-----------------FULL CODE------------------------------

#include <iostream> 
using namespace std; 

void heapify(int arr[], int n, int i) 
{ 
	int largest = i; // Initialize largest as root 
	int l = 2*i + 1; // left = 2*i + 1 
	int r = 2*i + 2; // right = 2*i + 2 

	// If left child is larger than root 
	if (l < n && arr[l] > arr[largest]) 
		largest = l; 

	// If right child is larger than largest so far 
	if (r < n && arr[r] > arr[largest]) 
		largest = r; 

	// If largest is not root 
	if (largest != i) 
	{ 
		swap(arr[i], arr[largest]); 

		// Recursively heapify the affected sub-tree 
		heapify(arr, n, largest); 
	} 
} 

void heapSort(int arr[], int n) 
{ 
	// Build heap (rearrange array) 
	for (int i = n / 2 - 1; i >= 0; i--) 
		heapify(arr, n, i); 

	// One by one extract an element from heap 
	for (int i=n-1; i>0; i--) 
	{ 
		// Move current root to end 
		swap(arr[0], arr[i]); 

		// call max heapify on the reduced heap 
		heapify(arr, i, 0); 
	} 
} 

// Drver program 
int main() 
{ 
	int arr[] = {12, 11, 13, 5, 6, 7}; 
	int n = sizeof(arr)/sizeof(arr[0]); 

	heapSort(arr, n); 

	cout << "Sorted array is \n"; 
		for (int i=0; i<n; ++i) 
		cout << arr[i] << " "; 
	cout << "\n";  
} 

---------------------------------------------------------------------------------------

Input:
2
5
4 1 3 9 7
10
10 9 8 7 6 5 4 3 2 1

Output:
1 3 4 7 9
1 2 3 4 5 6 7 8 9 10
