vector <int> bfs(vector<int> g[], int N) {

queue<int> qu;
vector<int> res;
vector<bool> vis(N, false);
qu.push(0);
vis[0]=true;
while(!qu.empty())
{
int num=qu.front();
qu.pop();
res.push_back(num);
for(auto it=g[num].begin(); it!=g[num].end();it++)
{
       if(vis[*it]==false)
      {
       vis[*it]=true;
       qu.push(*it);
      }
}
}
return res;
}


------------------------------------------------------------------
Input:
2
5 4
0 1 0 2 0 3 2 4
3 2
0 1 0 2

Output:
0 1 2 3 4    // BFS from node 0
0 1 2

Explanation:
Testcase 1: 
0 is connected to 1 , 2 , 3
2 is connected to 4
so starting from 0 , bfs will be 0 1 2 3 4.
