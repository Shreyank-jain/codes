 bool dfs(int src, bool vis[], vector<int>adj[])
{
     if(vis[src])            
       return true;
     
     vis[src]=true;
     
      for(auto it:adj[src])
    {
          if(!vis[it])
            dfs(it,vis,adj);
          
          else
            return true;   // this node is already travelled, you reach here again, means its a cycle
    }

  vis[src]=false;    // this vertex is already explored, and no cycle detected on exploring it, so backtrack
  return false;   
}

bool isCyclic(int V, vector<int> adj[])
{
    bool ans=false;            
    
    bool vis[V+1]={false};    
    
    for(int i=0;i<V;i++)
    {
         ans=dfs(i,vis,adj);  // explore the current vertex, and check if there is any cycle from current vertex
         
         if(ans)   // if you find a cycle from current vertex, then no need to check more
          break;
    }
   
   return ans;
}


--------------------------------------------------------------------------------------------------------------
Input:
3
2 2
0 1 0 0
4 3
0 1 1 2 2 3
4 3
0 1 2 3 3 2
Output:
1
0
1
