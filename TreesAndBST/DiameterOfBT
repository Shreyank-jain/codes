int height(Node *node)
{
        if(node==NULL)
              return 0;
        else
              return max(height(node->left),height(node->right))+1;
}

int diameter(Node* node)
{
    //base condition
    if(node==NULL)  return 0;

//recursion
//passing through root
int l_h = height(node->left);
int r_h = height(node->right);
int t_h = l_h+r_h+1;

//not passing through root
int l_d = diameter(node->left);
int r_d = diameter(node->right);
int max_val = max(l_d,r_d);

int res = max(t_h,max_val);

return res;
}


------------------------------------------------------------------------------------
Input:
2
1 2 3
10 20 30 40 60 

Output:
3
4

Explanation:
Testcase1: The tree is
        1
     /      \
   2        3
The diameter is of 3 length.
Testcase2: The tree is
                           10
                        /      \
                     20         30
                  /    \
               40       60
   The diameter is of 4 length.            
