----------Recursive approach-------------------


int isBSTUtil(Node* root, int min, int max){
        if(root == NULL)
              return 1;
        if((root->data > min && root->data <= max)
           && isBSTUtil(root->left, min, root->data) 
           && isBSTUtil(root->right,root->data, max))
                  return 1;
   return 0;
}

bool isBST(Node* root) {
    
    if(isBSTUtil(root, INT_MIN, INT_MAX))
         return true;
return false;
}


----------Inorder Solution-------------

void inorder(Node* roott)
{
    if(roott==nullptr)
          return ;
    
    inorder(roott->left);
    vec.push_back(roott->data);
    inorder(roott->right);
              
}
bool isBST(Node* root)
{
    vec.clear();
    
    inorder(root);
    for(int i=0;i<vec.size()-1;i++)
        if(vec[i]>vec[i+1])
               return 0 ;
    
    return 1 ;           
    
}

------------------------------------------------------------------------------
Input:
2
2 1 3
2 N 7 N 6 N 5 N 9 N 2 N 6
Output:
1
0

Explanation:
Testcase 1: The given Binary Tree is:
    2
  /    \ 
1      3
