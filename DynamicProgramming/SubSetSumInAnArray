Following are the two main steps to solve this problem:
1) Calculate sum of the array. If sum is odd, there can not be two subsets with equal sum, so return false.
2) If sum of array elements is even, calculate sum/2 and find a subset of array with sum equal to sum/2.

// A recursive C++ program for partition problem 
#include <bits/stdc++.h> 
using namespace std; 

// A utility function that returns true if there is 
// a subset of arr[] with sun equal to given sum 
bool isSubsetSum (int arr[], int n, int sum) 
{ 
	// Base Cases 
	if (sum == 0) 
		return true; 
	if (n == 0 && sum != 0) 
		return false; 

	// If last element is greater than sum, then 
	// ignore it 
	if (arr[n-1] > sum) 
	return isSubsetSum (arr, n-1, sum); 

	/* else, check if sum can be obtained by any of 
		the following 
		(a) including the last element 
		(b) excluding the last element 
	*/
	return isSubsetSum (arr, n-1, sum) || 
		isSubsetSum (arr, n-1, sum-arr[n-1]); 
} 

// Returns true if arr[] can be partitioned in two 
// subsets of equal sum, otherwise false 
bool findPartiion (int arr[], int n) 
{ 
	// Calculate sum of the elements in array 
	int sum = 0; 
	for (int i = 0; i < n; i++) 
	sum += arr[i]; 

	// If sum is odd, there cannot be two subsets 
	// with equal sum 
	if (sum%2 != 0) 
	return false; 

	// Find if there is subset with sum equal to 
	// half of total sum 
	return isSubsetSum (arr, n, sum/2); 
} 

// Driver program to test above function 
int main() 
{ 
	int arr[] = {3, 1, 5, 9, 12}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	if (findPartiion(arr, n) == true) 
		cout << "Can be divided into two subsets "
				"of equal sum"; 
	else
		cout << "Can not be divided into two subsets"
				" of equal sum"; 
	return 0; 
} 

// This code is contributed by rathbhupendra 
