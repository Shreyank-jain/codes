#include<bits/stdc++.h>
using namespace std;

int numberOfPaths(int m, int n) 
{ 
    int count[m][n]; 
  
    // Count of paths to reach any cell in first column is 1 
    for (int i = 0; i < m; i++) 
        count[i][0] = 1; 
  
    // Count of paths to reach any cell in first row is 1 
    for (int j = 0; j < n; j++) 
        count[0][j] = 1; 
  
    // Calculate count of paths for other cells in 
    // bottom-up manner using the recursive solution 
    for (int i = 1; i < m; i++) { 
        for (int j = 1; j < n; j++) 
  
            // By uncommenting the last part the code calculatest he total 
            // possible paths if the diagonal Movements are allowed 
            count[i][j] = count[i - 1][j] + count[i][j - 1]; //+ count[i-1][j-1]; 
    } 
    return count[m - 1][n - 1]; 
} 
int main()
 {
    ios_base::sync_with_stdio(false) ;
    cin.tie(NULL);
	int tc;
	cin>>tc ;
	
	while(tc--)
	{
	   int  m,n;
	   cin>>m>>n;
	   cout<<numberOfPaths(m,n)<<endl;
	}
	
	return 0;
}


-------------------------------------------------------------------------------------------------------
Input
2
3 3
2 8

Output
6
8

Explanation:
Testcase 1: Let the given input 3*3 matrix is filled as such:
A B C
D E F
G H I
