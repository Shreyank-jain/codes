Method 1

#include <iostream>
using namespace std;

int main() {
	int tc,n,m;
	cin>>tc;
	int *arr1,*arr2;
	while(tc--)
	{
	    cin>>n>>m;
	    arr1=new int[n];
	    arr2=new int[m];
	    for(int i=0;i<n;i++) cin>>arr1[i];
	    for(int i=0;i<m;i++) cin>>arr2[i];

	    int i=0,j=0;
	    while(i<n && j<m)
	    {
	        if(arr1[i]<arr2[j])
	            {
	                cout<<arr1[i]<<" ";
	                i++;
	            }
	        else
	            {
	                cout<<arr2[j]<<" ";
	                j++;
	            }
	    }
	    if(i>=n)
	      {
	          while(j<m)
	             {
	                 cout<<arr2[j]<<" ";
	                 j++;
	             }
	      }
	    if(j>=m)
	      {
	          while(i<n)
	             {
	                 cout<<arr1[i]<<" ";
	                 i++;
	             }
	      }
	    cout<<"\n";
	}
	return 0;
}

-----------------Method 2----------------

The idea is to begin from last element of ar2[] and search it in ar1[].
If there is a greater element in ar1[], then we move last element of ar1[] to ar2[].
To keep ar1[] and ar2[] sorted, we need to place last element of ar2[] at correct place in ar1[]. 
We can use Insertion Sort type of insertion for this.

#include <bits/stdc++.h> 
using namespace std; 

// Merge ar1[] and ar2[] with O(1) extra space 
void merge(int ar1[], int ar2[], int m, int n) 
{ 
	// Iterate through all elements of ar2[] starting from 
	// the last element 
	for (int i=n-1; i>=0; i--) 
	{ 
		/* Find the smallest element greater than ar2[i]. Move all 
		elements one position ahead till the smallest greater 
		element is not found */
		int j, last = ar1[m-1]; 
		for (j=m-2; j >= 0 && ar1[j] > ar2[i]; j--) 
			ar1[j+1] = ar1[j]; 

		// If there was a greater element 
		if (j != m-2 || last > ar2[i]) 
		{ 
			ar1[j+1] = ar2[i]; 
			ar2[i] = last; 
		} 
	} 
} 

// Driver program 
int main(void) 
{ 
	int ar1[] = {1, 5, 9, 10, 15, 20}; 
	int ar2[] = {2, 3, 8, 13}; 
	int m = sizeof(ar1)/sizeof(ar1[0]); 
	int n = sizeof(ar2)/sizeof(ar2[0]); 
	merge(ar1, ar2, m, n); 

	cout << "After Merging nFirst Array: "; 
	for (int i=0; i<m; i++) 
		cout << ar1[i] << " "; 
	cout << "nSecond Array: "; 
	for (int i=0; i<n; i++) 
		cout << ar2[i] << " "; 
return 0; 
} 

----------method 3 With Extra Space   using STL::merge() function -----------
// C++ program to merge two sorted arrays 
// std::merge() 
#include <iostream> 
#include <algorithm> 
using namespace std; 

int main() 
{ 
	int A[] = {1, 1, 9}; 
	int n = sizeof(A)/sizeof(A[0]); 

	int B[] = {2, 7, 11, 11}; 
	int m = sizeof(B)/sizeof(B[0]); 

	/*Merging in sorted order*/
	int C[m + n]; 
	merge(A, (A + n), B, (B + m), C); 

	// Print the merged array. 
	for (int i = 0; i < (m + n); i++) 
		cout << C[i] << " "; 

	return 0; 
} 
